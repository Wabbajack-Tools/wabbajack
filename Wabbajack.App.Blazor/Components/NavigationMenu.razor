@using Wabbajack.App.Blazor.Utility
@using Wabbajack.App.Blazor.Pages
@using Wabbajack.App.Blazor.Shared
@using Wabbajack.App.Blazor.State
@inject NavigationManager _navigationManager
@inject IStateContainer _stateContainer

@namespace Wabbajack.App.Blazor.Components

<div id="menu">
    <div class="brand">
        <img class="logo" src="images/Logo_Dark_Transparent.png" alt="Wabbajack Logo">
        <img class="letters" src="images/Letters_Dark_Transparent.png" alt="Wabbajack Text">
    </div>
    <div class="pages">
        @foreach (var (name, route) in Pages)
        {
            <div class="item @CurrentPage(route)" @onclick="@(() => Navigate(route))">
                <img src="images/icons/@(name).svg" alt="">
                <span>@name</span>
            </div>
        }
    </div>
    <div class="settings">
        <div class="item @CurrentPage(Settings.Route)" @onclick="@(() => Navigate(Settings.Route))">
            <img src="images/icons/settings.svg" alt="">
            <span>Settings</span>
        </div>
    </div>
    <div class="socials">
        <img src="images/icons/socials/patreon.svg" alt="" onclick="@OpenPatreonPage">
        <img src="images/icons/socials/github.svg" alt="" onclick="@OpenGithubPage">
        <img src="images/icons/socials/discord.svg" alt="" onclick="@OpenDiscord">
    </div>
</div>

@code {

    private static readonly Dictionary<string, string> Pages = new()
    {
        {
            "Play", Play.Route
        },
        {
            "Gallery", Gallery.Route
        },
        {
            "Install", Select.Route
        },
        {
            "Create", Create.Route
        }
    };

    private void Navigate(string page)
    {
        _navigationManager.NavigateTo(page);
    }

    protected override void OnInitialized()
    {
    // TODO(erri120): update this
        _navigationManager.LocationChanged += (_, _) => StateHasChanged();
    // _globalState.OnNavigationStateChange += StateHasChanged;
    }

    private string CurrentPage(string page)
    {
        string relativePath = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
        page = page.Remove(0, 1);// Strip the leading '/'
        return page.Equals(relativePath, StringComparison.OrdinalIgnoreCase) ? "active" : string.Empty;
    }

    private void OpenPatreonPage() => UIUtils.OpenWebsite(new Uri("https://www.patreon.com/user?u=11907933"));
    private void OpenGithubPage() => UIUtils.OpenWebsite(new Uri("https://github.com/wabbajack-tools/wabbajack"));
    private void OpenDiscord() => UIUtils.OpenWebsite(new Uri("https://discord.gg/wabbajack"));
}
